- id: logic_and
  name: و منطقی
  type: level
  x: 0
  y: 0
  goal: "∀ A B: U, A ∧ B -> B ∧ A"
- id: logic_or
  name: یای منطقی
  type: level
  x: -2
  y: 4
  goal: "∀ X Y: U, X ∨ Y -> Y ∨ X"
  dependencies:
    - logic_and
- id: logic_iff
  name: اگر و تنها اگر
  type: level
  x: -1
  y: 4
  goal: "∀ A B: U, A ↔ B -> B ↔ A"
  dependencies:
    - logic_and
- id: exists_on_goal
  name: وجود دارد در حکم
  type: level
  x: -1
  y: 1
  goal: "∀ a: ℤ, ∃ b: ℤ, a < b"
- id: exists_on_hyp
  name: وجود دارد در فرض
  type: level
  x: 1
  y: 1
  goal: "∀ a: ℤ, (∃ b: ℤ, a < b ∧ b < 5) → a < 5"
  dependencies:
    - logic_and
- id: forall_on_hyp
  name: به ازای هر در فرض
  type: level
  x: 0
  y: 2
  dependencies:
    - exists_on_hyp
    - exists_on_goal
  text: |
    بر می گردیم به مساله اول! با این تفاوت که این دفعه به جای گرفتن و انداختن، روی فرض
    راست کلیک کنید و با کمک نمونه گیری، حکم را ثابت کنید.

    اگر باهوش باشید، متوجه می شوید که به ازای هر در فرض خیلی شبیه به وجود دارد در حکم است (هر دو
    به یک نمونه نیاز دارند) و به ازای هر در حکم خیلی شبیه به وجود دارد در فرض است.

    معمولا به نمونه گیری به ازای هر ها کمتر نیاز پیدا می کنیم چون در اعمال کردن نمونه لازم به طور
    خودکار تشخیص داده می شود (همان طور که اولین بار با گرفتن و انداختن انجام دادید)
  initTactics:
    - intros
  goal: "(∀ a b: ℤ, a < b -> 0 < a -> 2 * a < 3 * b) -> 2 * 100 < 3 * 200"
- id: true1
  name: ترو
  type: level
  x: 1
  y: 3
  goal: "True"
  dependencies:
    - forall_on_hyp
- id: false1
  name: فالس ۱
  type: level
  x: 0
  y: 3
  goal: "(∀C: U, C) -> 2 = 3"
  text: |
    گزاره «هر گزاره ممکنی درست است» مسلما یک گزاره غلط است. در این قسمت با کمک این گزاره گزاره
    غلط دو مساوی سه را ثابت می کنیم.

    در بخش برابری می بینید که به کمک دو مساوی سه نیز می توان هر گزاره ای را ثابت کرد، که یعنی
    به نوعی همه گزاره های غلط معادل هستند و در حضور یکی از آن ها در فرض، می توان هر چیزی را ثابت کرد.
  dependencies:
    - forall_on_hyp
- id: false2
  name: فالس ۲
  type: level
  x: 0
  y: 4
  goal: "False -> 2 = 3"
  text: |
    این باز نیز دقیقا مشابه قسمت قبل است، با این تفاوت که از فالس که درون کتاب خانه تعریف شده
    است استفاده می کنیم. فالس دقیقا مشابه گزاره هر گزاره ای صحیح است عمل می کند؛ یک گزاره غلط است
    که اگر در فرض باشد می توان با آن هر چیزی را ثابت کرد.

    هم اثبات خودکار در صورت وجود فالس در فرض ها فعال می شود و هم می توانید روی آن راست کلیک کنید و
    از گزینه تناقض استفاده کنید.
  initTactics:
    - intros
  dependencies:
    - false1
- id: negate1
  name: نقیض
  type: level
  x: 0
  y: 5
  goal: "∀ A: U, (A ∧ (A -> False)) -> False"
  text: |
    نقیض یگ گزاره نیز یک ساختار نمایشی است و
    در داخل سیستم به صورت گزاره نتیجه می دهد فالس نمایش داده می شود.
    یعنی ~ A معادل A → False است.
    پس می توانید
    برای ثابت کردن نقیض یک چیز، آن را فرض کنید (با استفاده از همان معرفی یا معرفی با نام) و فالس
    را ثابت کنید. از نقیض های موجود در فرض نیز می توانید مثل هر گزاره شرطی دیگر استفاده کنید و آن ها
    را در گزاره های دیگر (فالس در حکم و خود گزاره در فرض) اعمال کنید.

    برای این که نقیض را در عمل ببینید، در این جا ثابت می کنیم که هیچ چیزی همراه با نقیضش هم زمان نمی تواند
    درست باشد.
  dependencies:
    - false2
    - logic_or
    - logic_iff
- id: demorgan1
  name: دمورگان ۱
  type: level
  x: -1
  y: 6
  goal: "∀ A B: U, (A ∨ B -> False) ↔ (A -> False) ∧ (B -> False)"
  text: |
    حالا با چیز هایی که یاد گرفتید، قانون دمورگان را ثابت کنید.
  dependencies:
    - negate1
- id: double_negation
  name: برهان خلف
  type: level
  x: 1
  y: 6
  goal: "(∀ A B: U, A -> A ∨ B) -> (∀ A B: U, B -> A ∨ B) -> (∀ T: U, ((T → False) → False) → T) → ∀ A: U, A ∨ (A → False)"
  text: |
    در این قسمت به برهان خلف می رسیم. برهان خلف یکی از ابزار های اساسی اثبات است که
    در آن به جای این که یک گزاره را ثابت کنیم، نقیض آن را در فرض ها می آوریم و با کمک
    آن به تناقض می رسیم (فالس را ثابت می کنیم). در این جا با توجه به تعریف ما از نقیض
    کافیست گزاره را با نقیض نقیض آن جایگزین کنیم و سپس از معرفی استفاده کنیم.

    قضیه جفت نقیض که آن را در فرض ها می بینید در هر چیز که اعمال شود آن را دو بار نقیض
    می کند. به کمک آن ثابت کنید که هر گزاره ای یا درست است و یا نقیض آن درست است.

    در حالت عادی هم جفت نقیض و هم آ یا نقیض آ در کتاب خانه هستند اما در این قسمت برای چالش
    بیشتر کتاب خانه غیر فعال شده است. این مساله سخت است! زود تسلیم نشوید.
  initTactics:
    - intros or_introl or_intror NNPP
  emptyLibrary: true
  dependencies:
    - negate1
- id: negate_exists
  name: نقیض وجود دارد
  type: level
  x: 0
  y: 6
  goal: "∀ P: ℤ -> U, (∀ x: ℤ, P x -> False) ↔ ((∃ x: ℤ, P x) -> False)"
  text: |
    در این قسمت ثابت می کنیم که نقیض وجود دارد عددی که فلان خاصیت را داشته باشد، معادل
    این است که همه اعداد ممکن نقیض آن خاصیت را دارند. در این جا
    P
    همان خاصیت دلخواه است و مثلا
    P 2
    یعنی دو این خاصیت را دارد.
  dependencies:
    - negate1
- id: demorgan2
  name: دمورگان ۲
  type: level
  x: 0
  y: 7
  goal: "∀ A B: U, (A ∧ B -> False) ↔ (A -> False) ∨ (B -> False)"
  text: |
    نوبت قسمت دوم قانون دمورگان است. این قسمت نیاز به برهان خلف دارد. آن را از کتاب خانه
    وارد کنید.
  dependencies:
    - demorgan1
    - double_negation
    - negate_exists
