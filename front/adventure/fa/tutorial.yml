- id: apply
  text: |
    سلام. این جا محیط اثبات چک کنه. ما باید چیزی که زیر خط نوشته رو ثابت کنیم. و چیز هایی که
    بالای خط نوشته، فرض هایی هستن که می تونیم از اون ها استفاده کنیم. فرض ما می گه که
    به ازای هر عدد صحیح مثل آ و ب، اگر آ از ب کمتر باشه و آ مثبت باشه، دو به توان آ از
    سه به توان ب کمتره. چیزی که ما باید ثابت کنیم اینه که دو به توان صد از سه به توان دویست
    کمتره، و صد و دویست توی شرایط فرض ما صدق می کنن. پس به کمک دستگیره (دو دایره کوچیک توی هم) فرض رو
    بگیر و بنداز توی هدف. بعد اثبات رو کامل کن.
  name: اعمال
  type: level
  x: 0
  y: 0
  goal: "(∀ a b: ℤ, a < b -> 0 < a -> 2 ^ a < 3 ^ b) -> 2 ^ 100 < 3 ^ 200"
  initTactics:
    - intros farze_ma
- id: apply2
  text: |
    دوباره تقریبا می خوایم همون مساله قبلی رو ثابت کنیم. با این تفاوت که این دفعه هیچ پیش فرضی نداریم
    ولی باید گزاره شرطی به ازای هر دو عدد فلان، نتیجه می دهد دو به توان صد کمتر است از سه به توان دویست
    را ثابت کنیم.

    برای ثابت کردن یک گزاره شرطی، می توان فرض گرفت که مقدمه آن درست است و به کمک آن فرض، موخره را
    نتیجه گرفت. با دوبار کلیک کردن بر روی حکم، اثبات چک کن این کار را برای ما انجام می دهد. روی حکم
    جفت کلیک کنید و سپس مثل مرحله قبلی ادامه دهید.
  name: اعمال ۲
  type: level
  x: 0
  y: 1
  dependencies:
    - apply
  goal: "(∀ a b: ℤ, a < b -> 0 < a -> 2 ^ a < 3 ^ b) -> 2 ^ 100 < 3 ^ 200"
- id: intros_with_name
  name: معرفی با نام
  text: |
    در این قسمت می خواهیم یک گزاره را به ازای همه اعداد صحیح ثابت کنیم. گزاره بیان می کند که اگر
    یک عدد زوج باشد، به علاوه یک به علاوه یک آن نیز زوج است. دو فرض کمکی نیز در فرض  ها داریم که
    احتمالا خودتان می توانید بخوانید.

    برای ثابت کردن گزاره های صوری، کافیست یک عدد دلخواه که شرط خاصی ندارد را در نظر بگیریم و برای
    آن ثابت کنیم. برای این که این کار را در اثبات چک کن انجام دهید، می توانید روی حکم کلیک راست کنید
    و از منویی که باز می شود گزینه «معرفی با نام» را انتخاب کنید (روی معرفی خالی کلیک نکنید وگرنه
    از صفحه کامپیوتر یک اژدهای سه سر بیرون می آید و شما را می خورد) و سپس یک نام مانند
    `akbar`
    را انتخاب کنید. می بینید که یک عدد دلخواه مثل اکبر فرض می شود و در ادامه شما باید حکم را برای
    اکبر ثابت کنید. ادامه کار مثل مراحل قبل است.
  type: level
  x: -1
  y: 2
  dependencies:
    - apply2
  goal: "(∀ a, a mod 2 = 0 -> (a + 1) mod 2 = 1) -> (∀ a, a mod 2 = 1 -> (a + 1) mod 2 = 0) -> (∀ a, a mod 2 = 0 -> ((a + 1) + 1) mod 2 = 0)"
  initTactics:
    - intros zoj_ba_yek_mishe_fard fard_ba_yek_mishe_zoj
- id: suggestions
  name: پیشنهادات
  text: |
    منویی که در قسمت قبل با کلیک راست باز کردید منوی پیشنهادات حکم بود. حکم ها و فرض ها
    طبق الگویی که دارند ممکن است پیشنهاداتی داشته باشند. از میان این پیشنهادات ممکن است
    یکی ستاره داشته باشد که در این صورت آن پیشنهاد هنگام جفت کلیک انتخاب می شود.

    در منوی پیشنهادات صور عمومی و هم چنین گزاره های شرطی، دو گزینه معرفی با نام و معرفی خالی
    وجود دارد. معمولا نام متغیر ها اهمیت چندانی ندارد و اثبات چک کن می تواند یک نام مناسب
    برای ما انتخاب کند (البته بعضا یک نام خاص منظوره به واضح تر شدن مراحل اثبات کمک
    می کند) به همین دلیل معرفی پیشنهاد پیش فرض است. هم چنین معرفی خالی تا جایی که گزاره صوری
    یا شرطی در حکم باشد این کار را ادامه می دهد و ممکن است چند متغیر جدید معرفی کند. وقتی در
    مراحل قبل روی گزاره های شرطی جفت کلیک می کردید در حقیقت از همین معرفی استفاده می کردید.

    به کمک معرفی یا معرفی با نام، گزاره زیر را ثابت کنید.
  type: level
  x: -1
  y: 3
  dependencies:
    - intros_with_name
  goal: "(∀ a b, a + 1 = b + 1 -> a = b) -> (∀ a b, a + 1 + 1 + 1 = b+1+1+1 -> a = b)"
  initTactics:
    - intros mosavi_be_alave_1
- id: apply_library
  name: اعمال از کتابخانه
  text: |
    در این مساله هم چنان همان قبلی را می خواهیم ثابت کنیم، منتها این بار بدون هیچ فرض کمکی. در
    کادر گوشه صفحه سه گزاره کمکی هستند که قبلا در کتابخانه ثابت شده اند. با نگه داشتن ماوس بر روی
    آن ها می توانید ببینید که این ها دقیقا چه گزاره هایی را نشان می دهند. مثل فرض ها، این
    گزاره های زرد را نیز می توانید برداشته و روی حکم بیاندازید تا در آن اعمال شوند. به کمک آن ها حکم را
    ثابت کنید.

    این اثبات از دو اثبات قبلی سخت تر است و مراحل بیشتری دارد. به عنوان راهنمایی، ابتدا از
    lt_trans
    استفاده کنید و یک عدد میانجی انتخاب کنید که بین این دو عدد باشد، سپس اثبات را مثل قبل
    ادامه دهید.
  type: level
  x: 1
  y: 2
  dependencies:
    - apply2
  suggestedLemmas:
    - lt_trans
    - pow_lt_l
    - pow_lt_r
  goal: "2 ^ 100 < 3 ^ 200"
- id: search
  name: جستجو
  text: |
    این هم همان مساله قبلی است اما قضیه های لازم از کتابخانه را خودتان باید با جستجو پیدا کنید. به
    صفحه جستجو بروید. جستجو هم با نام قضیه ها و هم با الگو ها کار می کند. مثلا می توانید با
    `? < ?`
    لیست قضایایی که به کمک آن می توان یک حکم با این الگو را ثابت کرد را دید. اگر هم چنان نتوانستید
    قضایای مورد نظر را پیدا کنید می توانید از الگو های خاص تر
    `? ^ ? < ? ^ ?`
    یا
    `? < ? -> ? < ?`
    استفاده کنید یا مثلا کلمه
    `pow`
    را جستجو کنید تا تمام قضایایی که نامشان حاوی این کلمه است فهرست شوند.
  type: level
  x: 1
  y: 3
  dependencies:
    - apply_library
  goal: "2 ^ 100 < 3 ^ 200"
- id: equation
  name: معادله
  text: |
    در این قسمت می خواهیم به دوران دبستان برگردیم و یک معادله یک متغیره را به کمک جبر ساده
    حل کنیم. ابزاری که در این قسمت کار با آن را یاد می گیرید ابزار جایگزینی است. ابتدا
    از معرفی استفاده کنید و سپس عدد ۱۱ در فرض را با موس انتخاب کنید. بک گزینه جایگزینی می آید
    که اگر آن را بزنید یک کادر باز می شود. در کادر باز شده بنویسید
    `8+3`
    اکنون از شما خواسته می شود تا ثابت کنید این مقادیر با هم برابرند و وقتی که این را ثابت کردید
    این دو مقدار با هم جایگزین می شوند! اکنون می توانید از قضیه
    `eq_plus_r`
    روی این فرض استفاده کنید (می توانید روی حکم هم این قضیه را بیندازید ولی اثباتتان سخت تر
    می شود) به همین ترتیب اثبات را کامل کنید.
  type: level
  x: 0
  y: 4
  dependencies:
    - search
    - suggestions
  goal: "∀ x, 2 * x + 3 = 11 -> x = 4"
